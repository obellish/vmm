lints.workspace = true

[package]
edition.workspace = true
license.workspace = true
name = "vmm"
rust-version.workspace = true
version.workspace = true

[dependencies]
clap = { version = "4", features = ["derive"] }
color-eyre = { version = "0.6", features = ["capture-spantrace"] }
ron.workspace = true
tracing.workspace = true
tracing-error = "0.2.1"
tracing-flame = "0.2.0"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }
vmm_alloc_stats = { path = "crates/alloc_stats" }
vmm_interpret = { path = "crates/interpret" }
vmm_ir.workspace = true
vmm_mimalloc = { path = "crates/mimalloc", optional = true }
vmm_opt = { path = "crates/opt", features = ["output"] }
vmm_parse = { path = "crates/parse" }
vmm_program.workspace = true
vmm_tape.workspace = true
vmm_utils = { workspace = true, features = ["copy_writer", "heap_size"] }

[features]
mimalloc = ["dep:vmm_mimalloc"]

[workspace]
members = [
    "crates/alloc_stats",
    "crates/binary",
    "crates/interpret",
    "crates/ir",
    "crates/iter",
    "crates/mimalloc",
    "crates/num",
    "crates/opt",
    "crates/parse",
    "crates/program",
    "crates/serde_array",
    "crates/serde_stack",
    "crates/span",
    "crates/tap",
    "crates/tape",
    "crates/testing",
    "crates/type_name",
    "crates/utils",
    "crates/vec"
]
resolver = "3"

[workspace.dependencies]
arbitrary = "1"
quickcheck = "1"
rayon = { version = "1.10", default-features = false }
ron = "0.10"
serde = { version = "1", default-features = false }
serde_array = { path = "crates/serde_array" }
serde_json = "1"
tap = { path = "crates/tap" }
tracing = { version = "0.1", features = ["attributes"] }
vmm_binary_io = { path = "crates/binary_io" }
vmm_ir = { path = "crates/ir" }
vmm_num = { path = "crates/num" }
vmm_program = { path = "crates/program" }
vmm_span = { path = "crates/span" }
vmm_tape = { path = "crates/tape" }
vmm_testing = { path = "crates/testing" }
vmm_utils = { path = "crates/utils" }
vmm_vec = { path = "crates/vec" }

[workspace.lints.rust]
elided_lifetimes_in_paths = "warn"

[workspace.lints.clippy]
borrow_as_ptr = "deny"
cast_possible_truncation = "allow"
cast_possible_wrap = "allow"
cast_precision_loss = "allow"
cast_ptr_alignment = "allow"
cast_sign_loss = "allow"
cognitive_complexity = "allow"
disallowed_methods = "deny"
float_cmp = "allow"
fn_params_excessive_bools = "allow"
inline_always = "allow"
large_stack_arrays = "allow"
missing_errors_doc = "allow"
missing_panics_doc = "allow"
missing_safety_doc = "allow"
module_name_repetitions = "allow"
needless_for_each = "allow"
needless_pass_by_value = "allow"
nursery = { level = "warn", priority = -1 }
option_if_let_else = "allow"
pedantic = { level = "warn", priority = -1 }
range_plus_one = "allow"
redundant_pub_crate = "allow"
redundant_type_annotations = "warn"
significant_drop_tightening = "allow"
similar_names = "allow"
str_to_string = "deny"
struct_excessive_bools = "allow"
style = { level = "warn", priority = -1 }
todo = "warn"
try_err = "warn"
tuple_array_conversions = "allow"
undocumented_unsafe_blocks = "allow"
unimplemented = "allow"
unnecessary_min_or_max = "allow"
unnecessary_wraps = "allow"
unsafe_derive_deserialize = "allow"
used_underscore_binding = "allow"
useless_conversion = "allow"

[workspace.package]
edition = "2024"
license = "MIT or Apache-2.0"
rust-version = "1.88"
version = "0.1.0"

[profile.release]
codegen-units = 1
lto = "fat"
panic = "abort"

[workspace.metadata.docs.rs]
all-features = true

[profile.dev.package.vmm_interpret]
opt-level = 3

[profile.dev.package.vmm_parse]
opt-level = 3
